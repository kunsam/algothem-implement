{"version":3,"file":"static/webpack/static/development/pages/tree/red-black-tree.js.67536fc1785bd40a26e4.hot-update.js","sources":["webpack:///./pages/tree/red-black-tree.tsx"],"sourcesContent":["import { Modal } from 'antd';\nimport 'antd/lib/modal/style/index.css';\nimport * as THREE from 'three'\nimport * as React from 'react'\nimport AppLayout from '../../layouts/app';\nimport ObjectInspector from 'react-object-inspector';\nimport EventManager from '../../src/core/event-manager';\nimport { ControlPanel } from '../../components/control-panel';\nimport { OrbitControls } from '../../static/js/orbitcontrol.js';\nimport { RedBlackTree, RBNode } from '../../src/tree/red-black-tree';\nimport { RedBlackTreeViewObject } from '../../src/view/tree/red-black-tree-viewobject';\nimport FontManager from '../../src/view/font/font-manager';\n\nexport class RedBlackTreePage extends React.Component<{app: App}> {\n\n  public camera?: THREE.PerspectiveCamera;\n\n  componentWillMount() {\n    FontManager.registerdFrontPathMap.set('helv', '/static/helv-font.json');\n  }\n  \n  public initScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xf0f0f0 );\n\n    scene.add( new THREE.AmbientLight( 0xf0f0f0 ) );\n\n    const light = new THREE.SpotLight( 0xffffff, 1.5 );\n    light.position.set( 0, 1500, 200 );\n    light.castShadow = true;\n    const lshadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 70, 1, 200, 2000 ) );\n    light.shadow = lshadow;\n  \n    light.shadow.bias = - 0.000222;\n    light.shadow.mapSize.width = 1024;\n    light.shadow.mapSize.height = 1024;\n    scene.add( light );\n\n    var planeGeometry = new THREE.PlaneBufferGeometry( 2000, 2000 );\n    planeGeometry.rotateX( - Math.PI / 2 );\n    var planeMaterial = new THREE.ShadowMaterial( { opacity: 0.2 } );\n    var plane = new THREE.Mesh( planeGeometry, planeMaterial );\n    plane.position.y = - 200;\n    plane.receiveShadow = true;\n    scene.add( plane );\n\n    var helper = new THREE.GridHelper( 2000, 100 );\n    helper.position.y = - 199;\n    if (helper.material instanceof THREE.Material) {\n      helper.material.opacity = 0.25;\n      helper.material.transparent = true;\n    }\n    scene.add( helper );\n    return scene;\n  }\n\n  public initTree() {\n    const treeContainer = new THREE.Object3D();\n    const redblacktree = new RedBlackTree();\n    redblacktree.insert(50);\n    redblacktree.insert(30);\n    redblacktree.insert(42);\n    redblacktree.insert(18);\n    redblacktree.insert(26);\n    redblacktree.insert(50);\n    redblacktree.insert(82);\n    let redBlackTreeViewObject: RedBlackTreeViewObject | undefined;\n    FontManager.getFontAsync('helv').then(() => {\n      redBlackTreeViewObject = new RedBlackTreeViewObject(this.props.app, redblacktree);\n      treeContainer.add(redBlackTreeViewObject);\n      this.props.app.eventManager.listenInsertKey((key) => {\n        redBlackTreeViewObject!.insert(key);\n      });\n    });\n    return {\n      treeContainer,\n      redBlackTreeViewObject\n    };\n  }\n\n  componentDidMount() {\n    const container = document.getElementById('rb-container' );\n    if (!container) {\n      return;\n    }\n\n    const scene = this.initScene();\n\n    const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.set( 0, 250, 1000 );\n    camera.lookAt(new THREE.Vector3(0, 0, -1));\n    camera.rotation.copy(new THREE.Euler())\n    this.camera = camera;\n    scene.add( camera );\n\n    const renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    renderer.shadowMap.enabled = true;\n    container.appendChild( renderer.domElement );\n\n    const controls: any = new OrbitControls( camera, renderer.domElement );\n    controls.damping = 0.2;\n    controls.addEventListener( 'change', () => {\n      renderer.render( scene, camera );\n    });\n  \n\n    const tree = this.initTree();\n    scene.add( tree.treeContainer );\n  \n    const raycaster = new THREE.Raycaster();\n    renderer.domElement.addEventListener('click', raycast, false );\n    function raycast ( e: MouseEvent ) {\n      raycaster.setFromCamera({\n        x: ( e.clientX / window.innerWidth ) * 2 - 1,\n        y: - ( e.clientY / window.innerHeight ) * 2 + 1,\n      }, camera );\n      if (tree.treeContainer.children[0] && tree.treeContainer.children[0].children) {\n        const intersects = raycaster.intersectObjects( tree.treeContainer.children[0].children, true );\n        const findNode = intersects.find(i => i.object.userData.node);\n        if (findNode && findNode.object.userData.node) {\n          const node = findNode.object.userData.node as RBNode;\n          Modal.info({\n            title: `node: ${node.key}`,\n            content: (<div><ObjectInspector data={node} /></div>)\n          });\n        }\n      }\n    }\n\n    animate();\n    document.addEventListener('keydown', this.onKeyDown.bind(this));\n    function animate() {\n      // 相机情况根据节点数量进行调整\n      // 网格helper更新为叶节点下面的位置\n      requestAnimationFrame( animate );\n      console.log(tree.redBlackTreeViewObject, 'tree.redBlackTreeViewObject')\n      if (tree.redBlackTreeViewObject) {\n        tree.redBlackTreeViewObject.update();\n      }\n      renderer.render( scene, camera );\n    }\n    \n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown);\n  }\n\n\n  public onKeyDown(e: KeyboardEvent) {\n    const camera = this.camera;\n    if (!camera) return;\n    const OFFSET = 10;\n    const cameraDirection = camera.getWorldDirection(new THREE.Vector3()).normalize();\n    switch (e.keyCode) {\n      case 87: { // w\n        camera.position.add(cameraDirection.clone().multiplyScalar(OFFSET));\n        break;\n      }\n      case 83: { // s\n        camera.position.add(cameraDirection.clone().multiplyScalar(-OFFSET));\n        break;\n      }\n      case 65: { // a\n        const crossVector = cameraDirection.clone().cross(new THREE.Vector3(0, 1, 0));\n        camera.position.add(\n          crossVector.normalize().multiplyScalar(-OFFSET)\n        );\n        break;\n      }\n      case 68: { // d\n        const crossVector = cameraDirection.clone().cross(new THREE.Vector3(0, 1, 0));\n        camera.position.add(\n          crossVector.normalize().multiplyScalar(OFFSET)\n        );\n        break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"rb-container\" />\n    )\n  }\n }\n\n\n \nexport interface App{\n  eventManager: EventManager;\n}\n\nexport default class redBlackTree extends React.Component {\n  private _eventManager: EventManager = new EventManager();\n  render() {\n    const app = {\n      eventManager: this._eventManager,\n    }\n    return (\n      <AppLayout>\n        <div id=\"control-header\" style={{ position: 'fixed' }}>\n          <ControlPanel app={app} />\n        </div>\n        <RedBlackTreePage app={app} />\n      </AppLayout>\n    )\n  }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AANA;AAAA;AAAA;AASA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzCA;AAAA;AAAA;AA2CA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAjEA;AAAA;AAAA;AAoEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAnIA;AAAA;AAAA;AAsIA;AACA;AAvIA;AAAA;AAAA;AA2IA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAtBA;AAwBA;AAvKA;AAAA;AAAA;AA0KA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA7KA;AACA;AADA;AAAA;AACA;AAqLA;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAdA;AACA;;;;;A","sourceRoot":""}
{"version":3,"file":"static/development/pages/tree/red-black-tree.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/control-panel.tsx","webpack:///./layouts/app.tsx","webpack:///./node_modules/@babel/runtime-corejs2/core-js/map.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/create.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-properties.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/set-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-int.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/createClass.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js","webpack:///./pages/tree/red-black-tree.tsx","webpack:///./src/core/event-manager.ts","webpack:///./src/queue/queue.ts","webpack:///./src/stack/stack.ts","webpack:///./src/tree/basic-binary-tree.ts","webpack:///./src/tree/red-black-tree.ts","webpack:///./src/util/traversal-helper.ts","webpack:///./src/view/font/font-manager.ts","webpack:///./src/view/tree/animator/animator-base.ts","webpack:///./src/view/tree/animator/recolor-animator.ts","webpack:///./src/view/tree/animator/rotated-animator.ts","webpack:///./src/view/tree/animator/show-text-animator.ts","webpack:///./src/view/tree/animator/visited-node-animator.ts","webpack:///./src/view/tree/mesh/index.ts","webpack:///./src/view/tree/red-black-tree-viewobject.ts","webpack:///./static/js/orbitcontrol.js","webpack:///external \"antd\"","webpack:///external \"core-js/library/fn/map\"","webpack:///external \"core-js/library/fn/object/create\"","webpack:///external \"core-js/library/fn/object/define-properties\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/get-prototype-of\"","webpack:///external \"core-js/library/fn/object/set-prototype-of\"","webpack:///external \"core-js/library/fn/parse-int\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"core-js/library/fn/symbol\"","webpack:///external \"core-js/library/fn/symbol/iterator\"","webpack:///external \"events\"","webpack:///external \"lodash\"","webpack:///external \"react\"","webpack:///external \"react-object-inspector\"","webpack:///external \"three\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","\nimport * as React from 'react'\nimport './control-panel.less';\nimport { Button, Input } from 'antd';\nimport { App } from '../pages/tree/red-black-tree';\n\ninterface ButtonInputPairProps{\n  type?: string;\n  label: string;\n  app?: App;\n  onConfirm: (key: number) => void;\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport class ButtonInputPair extends React.Component<ButtonInputPairProps, any> {\n  constructor(props: ButtonInputPairProps) {\n    super(props);\n    this.state = {\n      value: '',\n      operating: false,\n    }\n    if (this.props.app) {\n      this.props.app.eventManager.listenOperationDone(() => {\n        this.setState({\n          value: '',\n          operating: false,\n        });\n      });\n    }\n  }\n\n  public onInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n    this.props.onInputChange(e);\n  }\n\n  public onClick() {\n    if (this.state.value) {\n      this.props.onConfirm(parseInt(this.state.value));\n      this.setState({ operating: true });\n    }\n  }\n\n  render() {\n    // const \n    return (\n      <div className=\"ButtonInputPair\">\n        <Input\n          disabled={this.state.operating}\n          type={this.props.type}\n          value={this.state.value}\n          onKeyDown={e => {\n            if (e.keyCode === 13) this.onClick()\n          }}\n          onChange={this.onInputChange.bind(this)}\n        />\n        <Button onClick={this.onClick.bind(this)} >{this.props.label}</Button>\n      </div>\n    )\n  }\n}\n\nexport class ControlPanel extends React.Component<{ app: App }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      insertKey: ''\n    };\n  }\n\n  public onInsert(e: React.ChangeEvent<HTMLInputElement>) {\n    if (!e.target.value) {\n      return;\n    }\n  \n  }\n\n  public onConfirmInsert(key: number) {\n    this.props.app.eventManager.emitInsertKey(key);\n  }\n\n  render() {\n\n    return (\n      <div className=\"ControlPanel\">\n        <ButtonInputPair\n          label=\"插入\"\n          type=\"number\"\n          app={this.props.app}\n          onConfirm={this.onConfirmInsert.bind(this)}\n          onInputChange={this.onInsert.bind(this)}\n        />\n        <ButtonInputPair\n          label=\"删除\"\n          type=\"number\"\n          app={this.props.app}\n          onConfirm={this.onConfirmInsert}\n          onInputChange={this.onInsert}\n        />\n        <ButtonInputPair\n          label=\"查找\"\n          type=\"number\"\n          app={this.props.app}\n          onConfirm={this.onConfirmInsert}\n          onInputChange={this.onInsert}\n        />\n        <ButtonInputPair\n          label=\"左旋\"\n          app={this.props.app}\n          onConfirm={this.onConfirmInsert}\n          onInputChange={this.onInsert}\n        />\n        <ButtonInputPair\n          label=\"右旋\"\n          app={this.props.app}\n          onConfirm={this.onConfirmInsert}\n          onInputChange={this.onInsert}\n        />\n\n      </div>\n    )\n  }\n\n}","\n\n// import '../static/antd.min.css';\nimport \"./app.less\"\nimport * as React from 'react'\n\nexport default class AppLayout extends React.Component {\n\n\n  render() {\n\n    return (\n      <div id=\"AppLayout\">\n        {this.props.children}\n      </div>\n    )\n  }\n}","module.exports = require(\"core-js/library/fn/map\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/parse-int\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import _Object$getPrototypeOf from \"../../core-js/object/get-prototype-of\";\nimport _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _getPrototypeOf(o) {\n  _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _Object$create from \"../../core-js/object/create\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import _Symbol$iterator from \"../../core-js/symbol/iterator\";\nimport _Symbol from \"../../core-js/symbol\";\n\nfunction _typeof2(obj) { if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof _Symbol === \"function\" && _typeof2(_Symbol$iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import { Modal } from 'antd';\nimport 'antd/lib/modal/style/index.css';\nimport * as THREE from 'three'\nimport * as React from 'react'\nimport AppLayout from '../../layouts/app';\nimport ObjectInspector from 'react-object-inspector';\nimport EventManager from '../../src/core/event-manager';\nimport { ControlPanel } from '../../components/control-panel';\nimport { OrbitControls } from '../../static/js/orbitcontrol.js';\nimport { RedBlackTree, RBNode } from '../../src/tree/red-black-tree';\nimport { RedBlackTreeViewObject } from '../../src/view/tree/red-black-tree-viewobject';\nimport FontManager from '../../src/view/font/font-manager';\n\nexport class RedBlackTreePage extends React.Component<{app: App}> {\n\n  public camera?: THREE.PerspectiveCamera;\n  public _redBlackTreeViewObject: RedBlackTreeViewObject | undefined;\n\n  componentWillMount() {\n    FontManager.registerdFrontPathMap.set('helv', '/static/helv-font.json');\n  }\n  \n  public initScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xf0f0f0 );\n\n    scene.add( new THREE.AmbientLight( 0xf0f0f0 ) );\n\n    const light = new THREE.SpotLight( 0xffffff, 1.5 );\n    light.position.set( 0, 1500, 200 );\n    light.castShadow = true;\n    const lshadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 70, 1, 200, 2000 ) );\n    light.shadow = lshadow;\n  \n    light.shadow.bias = - 0.000222;\n    light.shadow.mapSize.width = 1024;\n    light.shadow.mapSize.height = 1024;\n    scene.add( light );\n\n    var planeGeometry = new THREE.PlaneBufferGeometry( 2000, 2000 );\n    planeGeometry.rotateX( - Math.PI / 2 );\n    var planeMaterial = new THREE.ShadowMaterial( { opacity: 0.2 } );\n    var plane = new THREE.Mesh( planeGeometry, planeMaterial );\n    plane.position.y = - 200;\n    plane.receiveShadow = true;\n    scene.add( plane );\n\n    var helper = new THREE.GridHelper( 2000, 100 );\n    helper.position.y = - 199;\n    if (helper.material instanceof THREE.Material) {\n      helper.material.opacity = 0.25;\n      helper.material.transparent = true;\n    }\n    scene.add( helper );\n    return scene;\n  }\n\n  public initTree() {\n    const treeContainer = new THREE.Object3D();\n    const redblacktree = new RedBlackTree();\n    redblacktree.insert(50);\n    redblacktree.insert(30);\n    redblacktree.insert(42);\n    redblacktree.insert(18);\n    redblacktree.insert(26);\n    redblacktree.insert(50);\n    redblacktree.insert(82);\n\n    FontManager.getFontAsync('helv').then(() => {\n      this._redBlackTreeViewObject = new RedBlackTreeViewObject(this.props.app, redblacktree);\n      treeContainer.add(this._redBlackTreeViewObject);\n      this.props.app.eventManager.listenInsertKey((key) => {\n        this._redBlackTreeViewObject!.insert(key);\n      });\n    });\n    return treeContainer;\n  }\n\n  componentDidMount() {\n    const container = document.getElementById('rb-container' );\n    if (!container) {\n      return;\n    }\n\n    const scene = this.initScene();\n\n    const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.set( 0, 250, 1000 );\n    camera.lookAt(new THREE.Vector3(0, 0, -1));\n    camera.rotation.copy(new THREE.Euler())\n    this.camera = camera;\n    scene.add( camera );\n\n    const renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    renderer.shadowMap.enabled = true;\n    container.appendChild( renderer.domElement );\n\n    const controls: any = new OrbitControls( camera, renderer.domElement );\n    controls.damping = 0.2;\n    controls.addEventListener( 'change', () => {\n      renderer.render( scene, camera );\n    });\n  \n    const tree = this.initTree();\n    scene.add( tree );\n  \n    const raycaster = new THREE.Raycaster();\n    renderer.domElement.addEventListener('click', raycast, false );\n    function raycast ( e: MouseEvent ) {\n      raycaster.setFromCamera({\n        x: ( e.clientX / window.innerWidth ) * 2 - 1,\n        y: - ( e.clientY / window.innerHeight ) * 2 + 1,\n      }, camera );\n      if (tree.children[0] && tree.children[0].children) {\n        const intersects = raycaster.intersectObjects( tree.children[0].children, true );\n        const findNode = intersects.find(i => i.object.userData.node);\n        if (findNode && findNode.object.userData.node) {\n          const node = findNode.object.userData.node as RBNode;\n          Modal.info({\n            title: `node: ${node.key}`,\n            content: (<div><ObjectInspector data={node} /></div>)\n          });\n        }\n      }\n    }\n\n    animate();\n    document.addEventListener('keydown', this.onKeyDown.bind(this));\n\n    const scope = this;\n    function animate() {\n      // 相机情况根据节点数量进行调整\n      // 网格helper更新为叶节点下面的位置\n      requestAnimationFrame( animate );\n      if (scope && scope._redBlackTreeViewObject) {\n        scope._redBlackTreeViewObject.update();\n      }\n      renderer.render( scene, camera );\n    }\n    \n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown);\n  }\n\n\n  public onKeyDown(e: KeyboardEvent) {\n    const camera = this.camera;\n    if (!camera) return;\n    const OFFSET = 10;\n    const cameraDirection = camera.getWorldDirection(new THREE.Vector3()).normalize();\n    switch (e.keyCode) {\n      case 87: { // w\n        camera.position.add(cameraDirection.clone().multiplyScalar(OFFSET));\n        break;\n      }\n      case 83: { // s\n        camera.position.add(cameraDirection.clone().multiplyScalar(-OFFSET));\n        break;\n      }\n      case 65: { // a\n        const crossVector = cameraDirection.clone().cross(new THREE.Vector3(0, 1, 0));\n        camera.position.add(\n          crossVector.normalize().multiplyScalar(-OFFSET)\n        );\n        break;\n      }\n      case 68: { // d\n        const crossVector = cameraDirection.clone().cross(new THREE.Vector3(0, 1, 0));\n        camera.position.add(\n          crossVector.normalize().multiplyScalar(OFFSET)\n        );\n        break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"rb-container\" />\n    )\n  }\n }\n\n\n \nexport interface App{\n  eventManager: EventManager;\n}\n\nexport default class redBlackTree extends React.Component {\n  private _eventManager: EventManager = new EventManager();\n  render() {\n    const app = {\n      eventManager: this._eventManager,\n    }\n    return (\n      <AppLayout>\n        <div id=\"control-header\" style={{ position: 'fixed' }}>\n          <ControlPanel app={app} />\n        </div>\n        <RedBlackTreePage app={app} />\n      </AppLayout>\n    )\n  }\n}\n\n","export enum CustomEventType{\n  onInsert = 'ONINSERT',\n  operationDone = 'OperationDone',\n}\nimport EventEmitter from 'events'\n\n\nexport default class EventManager{\n  public event: EventEmitter;\n  constructor() {\n    this.event = new EventEmitter()\n  }\n\n  public listenInsertKey(listener: (key: number) => void) {\n    this.event.on(CustomEventType.onInsert, listener)\n  }\n\n  public emitInsertKey(key: number) {\n    this.event.emit(CustomEventType.onInsert, key);\n  }\n\n  public listenOperationDone(listener: () => void) {\n    this.event.on(CustomEventType.operationDone, listener)\n  }\n\n  public emitOperationDone() {\n    this.event.emit(CustomEventType.operationDone);\n  }\n\n}","\n\n\nexport default class Queue{\n  public capacity: number; // to create a queue of given capacity\n\n  public front: any; // front item\n  public rear: any; // last item\n  public array: any[];\n\n  constructor(capacity?: number) {\n    this.capacity = capacity || 1000;\n    this.array = [];\n  }\n  public push(item: any) {\n    this.Enqueue(item);\n  }\n  public Enqueue(item: any) {\n    this.array.push(item);\n    this.front = this.array[0];\n    this.rear = this.array[this.array.length - 1];\n  }\n  public pop() {\n    return this.Dequeue();\n  }\n  public Dequeue() {\n    return this.array.shift();\n  }\n  public isFull() {\n    return this.array.length === this.capacity;\n  }\n  public empty() {\n    return this.array.length === 0;\n  }\n}","\n\n\nexport default class Stack{\n  public capacity: number; // to create a queue of given capacity\n\n  public front: any; // front item\n  public rear: any; // last item\n  public array: any[];\n\n  constructor(capacity?: number) {\n    this.capacity = capacity || 1000;\n    this.array = [];\n  }\n  public push(item: any) {\n    this.array.push(item);\n  }\n  public pop() {\n    return this.array.pop();\n  }\n  public isFull() {\n    return this.array.length === this.capacity;\n  }\n  public empty() {\n    return this.array.length === 0;\n  }\n  public clear() {\n    this.array = [];\n  }\n}","import Queue from \"../queue/queue\";\nimport Stack from \"../stack/stack\";\n\n\nexport type NNode = Node | null;\n\nexport class Node {\n  public key: number;\n  public left: NNode;\n  public right: NNode;\n  constructor(key: number) {\n    this.key = key;\n    this.left = this.right = null;\n  }\n}\n\n\nexport interface IBasicBinaryTree {\n  root: Node;\n  insert: (key: number, node?: Node) => void;\n  delete: (key: number, node?: Node) => void;\n}\n\nexport class BasicBinaryTree {\n  public root: Node;\n\n  constructor(rootKey: number) {\n    this.root = new Node(rootKey);\n  }\n\n  public insert(key: number, node?: Node) {\n    const queue = new Queue();\n    queue.push(node || this.root); \n\n    let temp: Node;\n    while (!queue.empty()) { \n      temp = queue.pop(); \n      if (!temp.left) { \n          temp.left = new Node(key); \n          break; \n      } else queue.push(temp.left); \n\n      if (!temp.right) { \n          temp.right = new Node(key); \n          break; \n      } else queue.push(temp.right); \n    } \n  }\n\n  // https://www.geeksforgeeks.org/deletion-binary-tree/\n  public delete(key: number, node?: Node) {\n    let keyNode: NNode;\n    const queue = new Queue();\n\n    const nodeRoot = node || this.root;\n    queue.push(nodeRoot);\n\n    let temp: Node;\n    while (!queue.empty()) { \n      temp = queue.pop();\n      if (temp.key === key) keyNode = temp; \n      if (temp.left) queue.push(temp.left); \n      if (temp.right) queue.push(temp.right);\n    }\n    if (keyNode) {\n      const x = temp.key;\n      this._deletDeepest(nodeRoot, temp); \n      keyNode.key = x; \n    }\n  }\n\n  private _deletDeepest(root: Node, deleteNode: Node) {\n    const queue = new Queue();\n    queue.push(root);\n\n    let temp: Node;\n    while(!queue.empty()) {\n      temp = queue.pop();\n      if (temp.right) { \n        if (temp.right.key === deleteNode.key) { \n            temp.right = null;\n            return;\n        } else queue.push(temp.right); \n      }\n\n      if (temp.left) {\n        if (temp.left.key === deleteNode.key) { \n            temp.left = null;\n            return;\n        } else queue.push(temp.left); \n      }\n    }\n\n  }\n\n  public inorder(node: NNode) {\n    if (!node) return;\n    this.inorder(node.left);\n    console.log(node.key);\n    this.inorder(node.right);    \n  }\n\n  public iterativePreorder(root: NNode) {\n    if (root === null) return;\n    const stack = new Stack();\n    stack.push(root);\n    while(!stack.empty()) {\n      const node = stack.pop();\n      console.log('current key:', node.key);\n      if (node.right) {\n        stack.push(node.right);\n      }\n      if (node.left) {\n        stack.push(node.left);\n      }\n    }\n  }\n\n  public levelOrderTraverse(node: Node) {\n    const queue = new Queue();\n    let tempNode = node;\n    while(tempNode) {\n      console.log(tempNode.key)\n      if (tempNode.left) {\n        queue.Enqueue(tempNode.left)\n      }\n      if (tempNode.right) {\n        queue.Enqueue(tempNode.right)\n      }\n      tempNode = queue.Dequeue();\n    }\n  }\n\n  public isMirror(node1: NNode, node2: NNode) {\n    if (node1 === null && node2 === null) return true;\n\n    if (node1 && node2 && node1.key === node2.key) {\n      return this.isMirror(node1.left, node2.right) && \n        this.isMirror(node1.right, node2.left);\n    }\n\n    return false;\n  }\n }\n\n\n\n\n\n\nconst root = new Node(10);\nroot.left = new Node(11); \nroot.left.left = new Node(7); \nroot.left.right = new Node(12); \nroot.right = new Node(9); \nroot.right.left = new Node(15); \nroot.right.right = new Node(8); \n\n/*\n           10\n        /     \\\n      11       9\n      / \\     / \\\n     7  12   15  8\n*/\n\n// const testTree = new BasicBinaryTree(10)\n// testTree.inorder(root);\n// console.log('\\n----')\n// testTree.delete(11, root);\n// testTree.inorder(root);\n// console.log('\\n----')\n// testTree.insert(11);\n// testTree.inorder(root);\n// testTree.levelOrderTraverse(root);","import { cloneDeep } from 'lodash';\nimport { Node } from './basic-binary-tree';\nimport { TraversalHelper } from \"../util/traversal-helper\";\nimport { RBNodeDirtyType } from '../view/tree/red-black-tree-viewobject';\n \nexport enum RBColor {\n  red = 1,\n  black = 2,\n}\n\nexport type NRBNode = RBNode | null;\n\n// visualization: https://www.cs.usfca.edu/~galles/visualization/RedBlack.html\nexport class RBNode extends Node {\n  public parent: NRBNode;\n  public left: NRBNode;\n  public right: NRBNode;\n  public color: RBColor = RBColor.red;\n  public userData: any = {};\n  constructor(key: number) {\n    super(key);\n    this.left = this.right = this.parent = null;\n  }\n  public uncle(): NRBNode {\n    if (this.parent === null || this.parent.parent === null) {\n      return null;\n    }\n    return this.parent.isOnLeft() ? this.parent.parent.right : this.parent.parent.left;\n  }\n  public sibling(): NRBNode {\n    if (this.parent === null) {\n      return null;\n    }\n    return this.isOnLeft() ? this.parent.right : this.parent.left;\n  }\n  public leftmost(): RBNode {\n    let temp: RBNode = this;\n    while(temp.left) {\n      temp = temp.left;\n    }\n    return temp;\n  }\n\n  public rightmost(): RBNode {\n    let temp: RBNode = this;\n    while(temp.right) {\n      temp = temp.right;\n    }\n    return temp;\n  }\n\n  public isOnLeft(): boolean {\n    if (this.parent === null) {\n      return false;\n    }\n    return this === this.parent.left;\n  }\n\n  public hasChild() {\n    return (this.left !== null || this.right !== null)\n  }\n  public hasOneChild() {\n    return (this.left !== null && this.right === null) ||\n      (this.right !== null && this.left === null);\n  }\n  public hasTwoChild() {\n    return (this.left !== null && this.right !== null)\n  }\n\n  public hasRedChild() {\n    return (this.left !== null && this.left.color === RBColor.red) ||\n      (this.right !== null && this.right.color === RBColor.red);\n  }\n  public moveDownWithNewParent(nParent: RBNode) {\n    if (this.parent) {\n      if (this.isOnLeft()) {\n        this.parent.left = nParent;\n      } else {\n        this.parent.right = nParent;\n      }\n    }\n    nParent.parent = this.parent;\n    this.parent = nParent;\n  }\n}\n\nexport interface RBNodeDirtyInfo{\n  data?: any;\n  node: NRBNode;\n  dirtyType: RBNodeDirtyType;\n}\n\n// 还可以实现的操作包括 join / union / difference\nexport class RedBlackTree {\n  public root: NRBNode;\n  public dirtyFlows: RBNodeDirtyInfo[][] = [];\n  private _traversalHelper: TraversalHelper;\n\n  constructor() {\n    this.root = null;\n    this._traversalHelper = new TraversalHelper();\n  }\n\n  public inorder() {\n    this._traversalHelper.inorder(this.root);\n  }\n\n  public inorderTraverse(callback: Function) {\n    this._traversalHelper.inorderTraverse(this.root, callback);\n  }\n\n  public levelOrder() {\n    this._traversalHelper.levelOrder(this.root);\n  }\n\n  public levelOrderTraverse(callback: Function) {\n    this._traversalHelper.levelOrderTraverse(this.root, callback);\n  }\n\n  private _swapColor(node1: NRBNode, node2: NRBNode) {\n    if (node1 === null || node2 === null) {\n      return;\n    }\n    const temp = node1.color;\n    node1.color = node2.color;\n    node2.color = temp;\n  }\n\n  private _swapKey(node1: RBNode, node2: RBNode) {\n    if (node1 === null || node2 === null) {\n      return;\n    }\n    const temp = node1.key;\n    node1.key = node2.key;\n    node2.key = temp;\n  }\n\n  public insert(key: number, afterBSTInsert?: (r: RBNode) => void) {\n    this.dirtyFlows = [];\n    const node = new RBNode(key);\n    this.root = this._BSTInsert(this.root, node);\n    if (afterBSTInsert) {\n      afterBSTInsert(node); // for animation\n    }\n    this._fix2RedBlack(node);\n    return this.dirtyFlows;\n  }\n\n  public rotateLeft(root: NRBNode, node: RBNode) {\n    let right = node.right; \n    node.right = right && right.left || null; \n    if (node.right) {\n      node.right.parent = node;\n    }\n    if (right) {\n      right.parent = node.parent; \n    }\n    if (node.parent === null) {\n      root = right; \n    } else if (node === node.parent.left) {\n      node.parent.left = right; \n    } else {\n      node.parent.right = right; \n    }\n    if (right) {\n      right.left = node; \n    }\n    node.parent = right;\n    return root;\n  }\n\n  private _rotateLeft(node: RBNode) {\n    // 1. update node right and its relationship\n    // 2. update node right parent and its relationship\n    // 3. update node parent and its relationship\n    let right = node.right; \n    node.right = right && right.left || null; \n    if (node.right) {\n      node.right.parent = node;\n    }\n    if (right) {\n      right.parent = node.parent; \n    }\n    if (node.parent === null) {\n      this.root = right; \n    } else if (node === node.parent.left) {\n      node.parent.left = right; \n    } else {\n      node.parent.right = right; \n    }\n    if (right) {\n      right.left = node; \n    }\n    node.parent = right;\n\n    this.dirtyFlows.push([{\n      node: cloneDeep(node),\n      dirtyType: RBNodeDirtyType.leftRotated,\n    }]);\n  }\n\n  private _rotateRight(node: RBNode) {\n    let left = node.left; \n    node.left = left && left.right || null; \n    if (node.left !== null) {\n      node.left.parent = node;\n    }\n    if (left) {\n      left.parent = node.parent;\n    }\n    if (node.parent === null) {\n      this.root = left; \n    } else if (node === node.parent.left) {\n      node.parent.left = left; \n    } else {\n      node.parent.right = left;\n    }\n    if (left) {\n      left.right = node; \n    }\n    node.parent = left;\n\n    this.dirtyFlows.push([{\n      node: cloneDeep(node),\n      dirtyType: RBNodeDirtyType.rightRotated,\n    }])\n  }\n\n  private _pushRecolorFlows(flows: RBNode[]) {\n    this.dirtyFlows.push(flows.map(node => ({\n      node, dirtyType: RBNodeDirtyType.recolor\n    })));\n  }\n\n  private _fix2RedBlack(node: NRBNode) {\n    if (node === null) {\n      return;\n    }\n    // https://www.youtube.com/watch?v=5IBxA-bZZH8&index=3&list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin\n    // four senarios\n    // 1. node = root -> color black\n    // 2. node.uncle = red -> recolor\n    // 3. node.uncle = black(Triangle) -> rotate node.parent\n    // 4. node.uncle = black(line) -> rotate node.grandparent & recolor\n\n    let parent: NRBNode; \n    let grandParent: NRBNode;\n\n    while (\n      node &&\n      node !== this.root &&\n      node.color !== RBColor.black &&\n      node.parent && node!.parent.color === RBColor.red // parent color must be red\n    ) {\n      parent = node!.parent;\n      grandParent = parent.parent;\n\n      if (!parent || !grandParent) {\n        break;\n      }\n\n      /*  Case : Parent of node is left child of Grand-parent of node */\n      if (parent === grandParent.left) {\n        let uncle = grandParent.right;\n        /* Case : 1 The uncle of node is also red Only Recoloring required */\n        if (uncle !== null && uncle.color == RBColor.red) { \n          grandParent.color = RBColor.red; \n          parent.color = RBColor.black;\n          uncle.color = RBColor.black;\n\n          const flows = [ grandParent, parent, uncle ];\n          this._pushRecolorFlows(flows);\n\n          node = grandParent;\n        } else {\n          /* Case : 2 node is right child of its parent Left-rotation required */\n          if (node === parent.right) { \n            this._rotateLeft(parent); \n            node = parent; \n            parent = node.parent;\n          }\n          /* Case : 3  node is left child of its parent Right-rotation required */\n          this._rotateRight(grandParent);\n          this._swapColor(parent, grandParent);\n          this._pushRecolorFlows([ parent!, grandParent ]);\n          node = parent; \n        }\n      } else {\n        /* Case : B Parent of pt is right child of Grand-parent of pt */\n        let uncle = grandParent.left;\n        if (uncle !== null && uncle.color == RBColor.red) { \n          grandParent.color = RBColor.red; \n          parent.color = RBColor.black;\n          uncle.color = RBColor.black;\n          this._pushRecolorFlows([ grandParent, parent, uncle ]);\n          node = grandParent;\n        } else {\n          /* Case : 2 node is right child of its parent Left-rotation required */\n          if (node === parent.left) { \n            this._rotateRight(parent);\n            node = parent; \n            parent = node.parent;\n          }          \n          /* Case : 3  node is left child of its parent Right-rotation required */\n          this._rotateLeft(grandParent); \n          this._swapColor(parent, grandParent);\n          this._pushRecolorFlows([ parent!, grandParent ]);\n          node = parent;\n        }\n      }\n    }\n    if (this.root) {\n      this.root.color = RBColor.black;\n      this._pushRecolorFlows([ this.root ]);\n    }\n  }\n\n  public delete(key: number) {\n    if (this.root === null) return;\n    this.dirtyFlows = [];\n    const node = this.search(key, true);\n    if (!node) return;\n    this._deleteNode(node);\n    return this.dirtyFlows;\n  }\n\n  public search(key: number, isAddtoDirty?: boolean): NRBNode {\n    if (this.root === null) {\n      return null;\n    }\n    let temp: NRBNode = this.root;\n    while(temp) {\n      if (key < temp.key) {\n        if (temp.left === null) {\n          break;\n        } else {\n          temp = temp.left;\n          if (isAddtoDirty) {\n            this.dirtyFlows.push([{\n              node: temp,\n              dirtyType: RBNodeDirtyType.visited,\n            }]);\n          }\n        }\n      } else if (key > temp.key) {\n        if (temp.right === null) {\n          break;\n        } else {\n          temp = temp.right;\n          if (isAddtoDirty) {\n            this.dirtyFlows.push([{\n              node: temp,\n              dirtyType: RBNodeDirtyType.visited,\n            }]);\n          }\n        }\n      } else {\n        break;\n      }\n    }\n    if (temp.key !== key) {\n      return null;\n    }\n    return temp;\n  }\n\n  private _deleteNode(node: RBNode) {\n\n    const replaceNode = this._BSTreplace(node);\n\n\n    this.dirtyFlows.push([{\n      node: replaceNode,\n      dirtyType: RBNodeDirtyType.find,\n      data: { text: 'replaceNode' }\n    }]);\n\n    const areBothBlack = (replaceNode === null || replaceNode.color === RBColor.black) &&\n      (node.color === RBColor.black);\n\n    // NOTICE replaceNode 选择不同会导致结果不同 也可以选择 predesuccor\n    if (replaceNode === null) {\n       // node is a leaf\n      if (node === this.root) {\n        this.root = null;\n      } else {\n        if (areBothBlack) {\n          this._fixDoubleBlack(node);\n        } else {\n          if (node.sibling()) {\n            node.sibling()!.color = RBColor.red;\n          }\n        }\n        if (node.parent) {\n          if (node.isOnLeft()) {\n            node.parent.left = null;\n          } else {\n            node.parent.right = null;\n          }\n        }\n      }\n      return;\n    }\n\n    // one child\n    if (node.left === null || node.right === null) {\n      if (node === this.root) {\n        node.key = replaceNode.key;\n        node.left = node.right = null;\n      } else {\n        if (node.parent) {\n          if (node.isOnLeft()) {\n            node.parent.left = replaceNode;\n          } else {\n            node.parent.right = replaceNode;\n          }\n        }\n        replaceNode.parent = node.parent;\n        if (areBothBlack) {\n          // TODO 这里一定不可能达到啊 如果只有一个child， replaceNode 也为黑，若replaceNode还有子节点，则在其他子节点路径必须还有黑，或者没有子节点，\n          this._fixDoubleBlack(replaceNode);\n        } else {\n          replaceNode.color = RBColor.black;\n        }\n      }\n      return;\n    }\n\n    // v has 2 children, swap values with successor and recurse\n    this._swapKey(replaceNode, node);\n    this._deleteNode(replaceNode);\n  }\n\n\n  private _fixDoubleBlack(node: NRBNode) {\n    if (node === null || node === this.root) return;\n    const sibling = node.sibling();\n    const parent = node.parent;\n    if (!parent) {\n      return;\n    }\n    if (!sibling) {\n      this._fixDoubleBlack(parent);\n    } else {\n      if (sibling.color === RBColor.red) {\n        parent.color = RBColor.red;\n        sibling.color = RBColor.black;\n        if (sibling.isOnLeft()) {\n          this._rotateRight(parent);\n        } else {\n          this._rotateLeft(parent);\n        }\n        this._fixDoubleBlack(node);\n      } else {\n        if (sibling.hasRedChild()) {\n          if (sibling.left && sibling.left.color === RBColor.red) {\n            if (sibling.isOnLeft()) {\n              sibling.left.color = sibling.color; \n              sibling.color = parent.color;\n              this._rotateRight(parent);\n            } else {\n              sibling.left.color = parent.color;\n              this._rotateRight(sibling);\n              this._rotateLeft(parent);\n            }\n          } else {\n            if (sibling.isOnLeft()) {\n              sibling.right!.color = parent.color;\n              this._rotateLeft(sibling);\n              this._rotateRight(parent);\n            } else {\n              sibling.right!.color = sibling.color; \n              sibling.color = parent.color; \n              this._rotateLeft(parent);\n            }\n          }\n          parent.color = RBColor.black;\n        } else {\n          sibling.color = RBColor.red;\n          if (parent.color === RBColor.black) {\n            this._fixDoubleBlack(parent);\n          } else {\n            parent.color = RBColor.black;\n          }\n        }\n      }\n    }\n  }\n\n  // find node that replaces a deleted node in BST\n  private _BSTreplace(node: RBNode) {\n    if (node.left && node.right) {\n      return node.right.leftmost();\n    }\n    return node.left || node.right;\n  }\n\n  // private _BSTreplace2(node: RBNode) {\n  //   if (node.left && node.right) {\n  //     return node.left.rightmost();\n  //   }\n  //   return node.right || node.left;\n  // }\n\n  private _BSTInsert(root: RBNode | null, node: RBNode) {\n    if (root === null) return node;\n    if (node.key < root.key) {\n      this.dirtyFlows.push([ { node: root, dirtyType: RBNodeDirtyType.visited } ]);\n      root.left = this._BSTInsert(root.left, node);\n      root.left.parent = root; \n    } else if (node.key > root.key) {\n      this.dirtyFlows.push([ { node: root, dirtyType: RBNodeDirtyType.visited } ]);\n      root.right = this._BSTInsert(root.right, node); \n      root.right.parent = root; \n    }\n    return root;\n  }\n\n}\n\nexport function checkInsert() {\n  const rbt = new RedBlackTree();    \n  rbt.insert(20);\n  rbt.insert(10);\n  rbt.insert(14);\n  // rbt.inorder();\n  console.log('level order')\n  rbt.levelOrder();\n}\n// checkInsert();\n\nexport function checkInsert2() {\n  const rbt = new RedBlackTree();    \n  rbt.insert(5); \n  rbt.insert(3); \n  rbt.insert(8);\n  rbt.insert(12);\n  rbt.insert(7);\n  // console.log(rbt.root);\n  rbt.inorder();\n  console.log('level order')\n  rbt.levelOrder();\n}\n// checkInsert2()\n\n\nexport function checkDelete() {\n  const tree = new RedBlackTree(); \n  tree.insert(7); \n  tree.insert(3); \n  tree.insert(18); \n  tree.insert(10);\n  tree.insert(22); \n  tree.insert(8); \n  tree.insert(11); \n  tree.insert(26); \n  tree.insert(2); \n  tree.insert(6); \n  tree.insert(13);\n\n  // tree.inorder();\n  // console.log('level order')\n  // tree.levelOrder();\n\n  tree.delete(18);\n  // tree.delete(11);\n  // tree.delete(3);\n  // tree.delete(10);\n  // tree.delete(22);\n  // tree.inorder();\n  console.log('level order')\n  tree.levelOrder();\n}\n\n// checkDelete();\n\n\nexport function checkrotateLeft() {\n  const node = new RBNode(10);\n\n  node.left = new RBNode(8);\n  node.left.parent = node;\n\n  node.left.left = new RBNode(4);\n  node.left.left.parent = node.left;\n\n  node.left.right = new RBNode(15);\n  node.left.right.parent = node.left;\n\n  node.left.right.left = new RBNode(14);\n  node.left.right.left.parent = node.left.right;\n\n  const rbt = new RedBlackTree();\n  rbt.root = node;\n  const root = rbt.rotateLeft(node, node.left);\n  // console.log(root.left, root.left.left, 'rootroot')\n  rbt.root = root;\n  rbt.levelOrder();\n}\n// checkrotateLeft();\n","import { NNode } from './../tree/basic-binary-tree';\nimport Queue from '../queue/queue';\n\n\nexport class TraversalHelper {\n\n  public inorder(node: NNode) {\n    this._inorderHelper(node);\n  }\n\n  private _inorderHelper(root: NNode, callback?: Function) {\n    if (root === null) return; \n    this._inorderHelper(root.left);\n    if (callback) callback(root);\n    console.log('node.key: ', root.key);\n    this._inorderHelper(root.right); \n  }\n\n  public inorderTraverse(root: NNode, callback: Function) {\n    this._inorderHelper(root, callback);\n  }\n\n  public levelOrderTraverse(root: NNode,  callback: Function) {\n    if (root === null) return;\n    const queue = new Queue();\n    queue.push(root);\n    console.time('levelOrderTraverse')\n    while (!queue.empty()) {\n      const temp = queue.pop();\n      // console.time('callback')\n      setTimeout(() => callback(temp), 1) ;\n      // console.timeEnd('callback')\n      if (temp.left !== null) {\n        queue.push(temp.left);\n      }\n      if (temp.right !== null) {\n        queue.push(temp.right); \n      }\n    }\n    console.timeEnd('levelOrderTraverse')\n  }\n\n  public levelOrder(root: NNode) {\n    if (root === null) return; \n    const queue = new Queue();\n    queue.push(root); \n    console.time('levelOrder-time')\n    while (!queue.empty()) { \n      const temp = queue.pop(); \n      console.log('node.key: ', temp.key);\n      if (temp.left !== null) {\n        queue.push(temp.left); \n      }\n      if (temp.right !== null) {\n        queue.push(temp.right); \n      }\n    }\n    console.timeEnd('levelOrder-time')\n  }\n\n}","import * as THREE from 'three';\n\n\nexport default class FontManager{\n  public static fontLoader: THREE.FontLoader = new THREE.FontLoader();\n  public static frontMap: Map<string, THREE.Font> = new Map();\n  public static registerdFrontPathMap: Map<string, string> = new Map();\n  public static getFontAsync(type: string): Promise<THREE.Font> {\n    if (FontManager.frontMap.has(type)) {\n      return Promise.resolve(FontManager.frontMap.get(type)!);\n    }\n    const path = FontManager.registerdFrontPathMap.get(type);\n    if (!path) {\n      throw new Error('Dont Exist this font type');\n    }\n    return new Promise(res => {\n      this.fontLoader.load(path, (result) => {\n        res(result);\n        FontManager.frontMap.set(type, result);\n      });\n    });\n  }\n\n  public static getFont (type: string) {\n    return FontManager.frontMap.get(type) as THREE.Font;\n  }\n  \n  public static registerFont(name: string, path: string) {\n    FontManager.registerdFrontPathMap.set(name, path);\n  }\n\n}\n","import { RBNode } from \"../../../tree/red-black-tree\";\n\nexport default class AnimatorBase {\n  protected _node: RBNode;\n\n  constructor(node: RBNode) {\n    this._node = node;\n  }\n\n  public animate () {\n    return false;\n  };\n\n  \n\n}","import * as THREE from 'three';\nimport AnimatorBase from \"./animator-base\";\nimport { RBNode } from \"../../../tree/red-black-tree\";\n\nexport default class RecolorNodeAnimator extends AnimatorBase {\n  public END_FRAME = 20;\n  private _mesh: THREE.Mesh;\n  private _frame: number = 0;\n  private _colorChanged: boolean = false;\n  private _changeToColor: number;\n\n  constructor(node: RBNode, mesh: THREE.Mesh, changeToColor: number, duration?: number) {\n    super(node);\n    this._mesh = mesh;\n    this._changeToColor = changeToColor;\n    if (duration) {\n      this.END_FRAME = duration;\n    }\n  }\n\n  private _changeColor() {\n    if (this._colorChanged) {\n      return;\n    }\n    if (this._mesh.material instanceof THREE.MeshPhongMaterial) {\n      this._mesh.material.color.setHex(this._changeToColor);\n      this._colorChanged = true;\n    }\n  }\n\n  public animate() {\n    if (this._frame < this.END_FRAME) {\n      this._frame++;\n      this._changeColor();\n      return true;\n    }\n    return false;\n  }\n}","\nimport * as THREE from 'three';\nimport AnimatorBase from \"./animator-base\";\nimport { getConnectLineMesh } from '../mesh';\nimport FontManager from '../../font/font-manager';\nimport { RBNode } from \"../../../tree/red-black-tree\";\nimport { NRBNode } from './../../../tree/red-black-tree';\nimport { RBNodeDirtyType } from \"../red-black-tree-viewobject\";\nimport { RBNodeViewObject, RedBlackTreeViewObject } from './../red-black-tree-viewobject';\n\n\nexport interface IRotateInfo{\n  center: THREE.Vector3;\n  initAngle: number;\n}\n\nexport default class RotatedAnimator extends AnimatorBase {\n  public END_FRAME = 40;\n  private _frame: number = 0;\n  private _dirtyType: RBNodeDirtyType;\n  private _viewObjectMap: Map<number, RBNodeViewObject>;\n  private _textMap: Map<number, THREE.Mesh> = new Map();\n  private _initRotateInfoMap: Map<number, IRotateInfo> = new Map();\n\n  constructor(node: RBNode, dirtyType: RBNodeDirtyType, map: Map<number, RBNodeViewObject>, duration?: number) {\n    super(node);\n    this._viewObjectMap = map;\n    this._dirtyType = dirtyType;\n    if (duration) {\n      this.END_FRAME = duration;\n    }\n  }\n  \n  private _rotateNode(node: RBNode, dirtyDirection: RBNodeDirtyType, isOriginChild?: boolean) {\n    const nodeViewObject = this._viewObjectMap.get(node.key);\n    if (!nodeViewObject) {\n      return;\n    }\n\n    nodeViewObject.mesh.children.forEach(child => {\n      if (child.userData.isConnectLine) {\n        nodeViewObject.mesh.remove(child);\n      }\n    });\n\n    const isLeftRotate = dirtyDirection === RBNodeDirtyType.leftRotated;\n\n    const radius = Math.sqrt(\n      Math.pow(RedBlackTreeViewObject.horizontalOffset / 2, 2) +\n      Math.pow(RedBlackTreeViewObject.verticalOffset / 2, 2)\n    );\n    const sign = isLeftRotate ? -1 : 1;\n\n    let initInfo = this._initRotateInfoMap.get(node.key);\n    if (!initInfo) {\n      const childSign = isOriginChild ? -1 : 1;\n      const initCircleCenter = nodeViewObject.mesh.position.clone().sub(new THREE.Vector3(\n        -1 * sign * RedBlackTreeViewObject.horizontalOffset / 2,\n        childSign * RedBlackTreeViewObject.verticalOffset / 2,\n        0,\n      ));\n      const distance = new THREE.Vector3().subVectors(\n        nodeViewObject.mesh.position,\n        initCircleCenter.clone().add(new THREE.Vector3(radius, 0, 0))\n      ).length();\n      let initAngle = childSign * Math.acos((2 * radius * radius - distance * distance) / (2 * radius * radius));\n      initInfo = {\n        center: initCircleCenter,\n        initAngle,\n      }\n      this._initRotateInfoMap.set(node.key, initInfo);\n    }\n\n    const animateAngle = -1 * sign * this._frame * Math.PI / this.END_FRAME;\n    const x = initInfo.center.x + radius * Math.cos(animateAngle + initInfo.initAngle);\n    const y = initInfo.center.y + radius * Math.sin(animateAngle + initInfo.initAngle);\n\n    const newPosition = new THREE.Vector3(x, y, nodeViewObject.mesh.position.z);\n    nodeViewObject.mesh.position.copy(newPosition);\n    node.userData.position = newPosition;\n    this._addText(node.key);\n    this._refreshNodeConnectLine(node);\n  }\n\n  private _refreshNodeConnectLine(node: NRBNode) {\n    if (!node) {\n      return;\n    }\n    const nodeViewObject = this._viewObjectMap.get(node.key);\n    if(!nodeViewObject) {\n      return;\n    }\n    nodeViewObject.mesh.children.forEach(child => {\n      if (child instanceof THREE.Line) {\n        nodeViewObject.mesh.remove(child);\n      }\n    });\n    const line = getConnectLineMesh(nodeViewObject.mesh);\n    if (line) {\n      nodeViewObject.mesh.add(line);\n    }\n  }\n\n  private _keepChildTrack(node: NRBNode) {\n    if (node === null) {\n      return;\n    }\n    if (!node.parent) {\n      return;\n    }\n    const nodeViewObject = this._viewObjectMap.get(node.key);\n    const parentViewObject = this._viewObjectMap.get(node.parent.key);\n    if (!parentViewObject || !nodeViewObject) {\n      return;\n    }\n    nodeViewObject.mesh.position.copy(\n      RedBlackTreeViewObject.getChildPosition(node, parentViewObject.mesh.position)\n    );\n    this._refreshNodeConnectLine(node);\n    if (node.left) {\n      this._keepChildTrack(node.left);\n    }\n    if (node.right) {\n      this._keepChildTrack(node.right);\n    }\n  }\n\n  private _rotate() {\n    const self = this._node;\n    const parent = self.parent;\n    if (!parent) {\n      return;\n    }\n    const nodeViewObject = this._viewObjectMap.get(self.key);\n    const parentViewObject = this._viewObjectMap.get(parent.key);\n    if (!nodeViewObject || !parentViewObject) {\n      return;\n    }\n    this._rotateNode(self, this._dirtyType);\n    this._rotateNode(parent, this._dirtyType, true);\n    this._keepChildTrack(self.left);\n    this._keepChildTrack(self.right);\n    if (self.isOnLeft()) {\n      this._keepChildTrack(parent.right);\n    } else {\n      this._keepChildTrack(parent.left);\n    }\n    \n  }\n\n  private _addText(nodeKey: number) {\n    if (this._textMap.has(nodeKey)) {\n      return;\n    }\n    const nodeViewObject = this._viewObjectMap.get(nodeKey);\n    if(!nodeViewObject) {\n      return;\n    }\n    const textGeo = new THREE.TextGeometry(`${\n      this._dirtyType === RBNodeDirtyType.leftRotated ? 'Left-Rotating' : 'Right-Rotating'\n    }`, {\n      height: 0,\n      size: 20,\n      font: FontManager.getFont('helv'),\n    });\n    const text = new THREE.Mesh(\n      textGeo,\n      new THREE.MeshBasicMaterial({ color: 0x000000 })\n    );\n    text.position.y += 80;\n    text.position.x += 60;\n    text.userData.isTextNode = true;\n    text.userData.immutable = true;\n    nodeViewObject.mesh.add(text);\n    this._textMap.set(nodeKey, nodeViewObject.mesh);\n  }\n\n  private _resetText() {\n    this._textMap.forEach(pmesh => {\n      pmesh.children.forEach(child => {\n        if(child.userData.isTextNode) {\n          pmesh.remove(child);\n        }\n      })\n    });\n    this._textMap.clear();\n  }\n\n  public animate() {\n    if (this._frame < this.END_FRAME) {\n      this._frame++;\n      this._rotate();\n      return true;\n    } else if (this._frame >= this.END_FRAME) {\n      this._initRotateInfoMap.clear();\n      this._resetText();\n    }\n    return false;\n  }\n}","import * as THREE from 'three';\nimport AnimatorBase from \"./animator-base\";\nimport { RBNode } from \"../../../tree/red-black-tree\";\nimport FontManager from '../../font/font-manager';\n\nexport interface ShowTextAnimatorProps{\n  node: RBNode;\n  text: string;\n  mesh: THREE.Mesh;\n  duration?: number;\n  parameters?: THREE.TextGeometryParameters;\n}\n\nexport default class ShowTextAnimator extends AnimatorBase {\n\n  private _frame: number = 0;\n  private _textMesh?: THREE.Mesh;\n  private _props: ShowTextAnimatorProps;\n\n  public END_FRAME = 20;\n\n  constructor(props: ShowTextAnimatorProps) {\n    super(props.node);\n    this._props = props;\n    if (props.duration) {\n      this.END_FRAME = props.duration;\n    }\n  }\n  private _addText() {\n    if (this._textMesh) {\n      return;\n    }\n    const parameters = this._props.parameters || {};\n    const { height, size, font } = parameters;\n    const textGeo = new THREE.TextGeometry(this._props.text, {\n      height: height === undefined ? 0 : height,\n      size: size === undefined ? 20 : size,\n      font: font || FontManager.getFont('helv'),\n    });\n    const textMesh = new THREE.Mesh(\n      textGeo,\n      new THREE.MeshBasicMaterial({ color: 0x000000 })\n    );\n    textMesh.position.y += 20;\n    textMesh.position.x += 50;\n    this._textMesh = textMesh;\n    this._props.mesh.add(textMesh);\n  }\n\n  private _resetText() {\n    if (this._textMesh) {\n      this._props.mesh.remove(this._textMesh);\n    }\n  }\n\n  public animate() {\n    console.log(this._frame, 'this._animatorFlows')\n    if (this._frame < this.END_FRAME) {\n      this._frame++;\n      this._addText();\n      return true;\n    } else if (this._frame >= this.END_FRAME) {\n      this._resetText();\n    }\n    return false;\n  }\n}","import * as THREE from 'three';\nimport AnimatorBase from \"./animator-base\";\nimport { RBNode } from \"../../../tree/red-black-tree\";\n\nexport default class VisitedNodeAnimator extends AnimatorBase {\n  public END_FRAME = 20;\n  private _mesh: THREE.Mesh;\n  private _frame: number = 0;\n  private _oldColor?: THREE.Color;\n\n  constructor(node: RBNode, mesh: THREE.Mesh, duration?: number) {\n    super(node);\n    this._mesh = mesh;\n    if (duration) {\n      this.END_FRAME = duration;\n    }\n  }\n\n  private _changeColor() {\n    if (!this._oldColor) {\n      this._oldColor = this._mesh.material.color;\n      this._mesh.material.color = new THREE.Color(0x00ff00);\n    }\n  }\n\n  private _resetColor() {\n    if (this._oldColor) {\n      this._mesh.material.color = this._oldColor;\n    }\n  }\n  \n  public animate(): boolean {\n    if (this._frame < this.END_FRAME) {\n      this._frame++;\n      this._changeColor();\n      return true;\n    } else if (this._frame >= this.END_FRAME) {\n      this._resetColor();\n    }\n    return false;\n  }\n}","import * as THREE from 'three';\nimport { NRBNode, RBColor } from './../../../tree/red-black-tree';\n\nexport function getSphereNode(node: NRBNode, font: THREE.Font): THREE.Mesh | undefined {\n  if (node === null) {\n    return;\n  }\n  var geometry = new THREE.SphereGeometry( 30, 30, 30 );\n  var material = new THREE.MeshPhongMaterial({\n    color: node.color === RBColor.black ? 0x000000 : 0xff0000\n  });\n  const mesh = new THREE.Mesh( geometry, material );\n  if (font) {\n    const textGeo = new THREE.TextGeometry(`${node.key}`, {\n      height: 0,\n      size: 20,\n      font: font,\n    });\n    const text = new THREE.Mesh(\n      textGeo,\n      new THREE.MeshBasicMaterial({ color: 0x000000 })\n    );\n    text.position.y += 50;\n    text.position.x -= 20;\n    mesh.add(text);\n  }\n\n  mesh.userData.node = node;\n  return mesh;\n}\n\nexport function getConnectLineMesh(sphereNode: THREE.Mesh): THREE.Line | undefined {\n\n  const parent = sphereNode.userData.node && sphereNode.userData.node.parent;\n  const parentPosition = parent && parent.userData.position;\n\n  if (!parentPosition) {\n    return;\n  }\n  var geometry = new THREE.Geometry();\n  geometry.vertices.push(\n    new THREE.Vector3(),\n    new THREE.Vector3().subVectors(parentPosition, sphereNode.position)\n  );\n  var line = new THREE.Line( geometry, new THREE.LineBasicMaterial({\n    color: 0x000000,\n  }));\n  return line;\n}","import * as THREE from 'three';\nimport { message } from 'antd';\nimport 'antd/lib/message/style/index.css';\nimport FontManager from '../font/font-manager';\nimport AnimatorBase from './animator/animator-base';\nimport { RBNode, RBColor } from './../../tree/red-black-tree';\nimport RotatedAnimator from './animator/rotated-animator';\nimport { App } from './../../../pages/tree/red-black-tree';\nimport { getSphereNode, getConnectLineMesh } from './mesh';\nimport RecolorNodeAnimator from './animator/recolor-animator';\nimport VisitedNodeAnimator from './animator/visited-node-animator';\nimport { RedBlackTree, RBNodeDirtyInfo } from '../../tree/red-black-tree';\nimport ShowTextAnimator from './animator/show-text-animator';\n\n\nexport enum RBNodeDirtyType{\n  none = \"NONE\",\n  find = \"FIND\",\n  insert = \"INSERT\",\n  visited = \"VISITED\",\n  recolor = \"RECOLOR\",\n  leftRotated = \"LEFTROTATED\",\n  rightRotated = \"RIGHTROTATED\",\n}\n\n\nexport class RBNodeViewObject {\n  public node: RBNode;\n  public mesh: THREE.Mesh;\n\n  public dirty: boolean = false;\n  private _dirtyFrame: number = 0;\n  private _oldColor?: THREE.Color;\n  public static DirtyMaxFrame: number = 20;\n\n  constructor(node: RBNode, mesh: THREE.Mesh) {\n    this.mesh = mesh;\n    this.node = node;\n  }\n\n  public onDirtyAnimate(onEnd: Function) {\n    if (this.dirty && this._dirtyFrame < RBNodeViewObject.DirtyMaxFrame) {\n      if (!this._oldColor) {\n        this._oldColor = this.mesh.material.color;\n      }\n      this.mesh.material.color = new THREE.Color(0x00ff00)\n      this._dirtyFrame++;\n    } else if (this._dirtyFrame >= RBNodeViewObject.DirtyMaxFrame) {\n      this._dirtyFrame = 0;\n      this.dirty = false;\n      this.mesh.material.color = this._oldColor;\n      this._oldColor = undefined;\n      onEnd();\n    }\n  }\n}\n\n\n\n\nexport class RedBlackTreeViewObject extends THREE.Object3D {\n\n  public static originPosition = new THREE.Vector3(0, 400, 0);\n  public static horizontalOffset = 80;\n  public static verticalOffset = 160;\n\n  public tree: RedBlackTree;\n  private _animatorFlows: AnimatorBase[][] = [];\n  private _nodeViewObjectMap: Map<number, RBNodeViewObject> = new Map();\n\n  private _app: App;\n  private _currentActiveAnimatorsLength?: number;\n  private _currentEndAnimatorsLength: number = 0;\n\n  private _enterAnimating: boolean = false;\n\n\n  constructor(app: App, tree: RedBlackTree) {\n    super();\n    this._app = app;\n    this.tree = tree;\n    tree.levelOrderTraverse((node: RBNode) => {\n      this.addNode(node);\n    });\n  }\n\n  public static getChildPosition(rbNode: RBNode, parentPosition: THREE.Vector3) {\n    if (!parentPosition) {\n      return RedBlackTreeViewObject.originPosition;\n    } else {\n      const position = parentPosition.clone();\n      position.y -= RedBlackTreeViewObject.verticalOffset;\n      if (rbNode.isOnLeft()) {\n        position.x -= RedBlackTreeViewObject.horizontalOffset;\n        if (rbNode.sibling() && rbNode.hasChild()) {\n          position.x -= RedBlackTreeViewObject.horizontalOffset;\n        }\n      } else {\n        position.x += RedBlackTreeViewObject.horizontalOffset;\n        if (rbNode.sibling() && rbNode.hasChild()) {\n          position.x += RedBlackTreeViewObject.horizontalOffset;\n        }\n      }\n      return position;\n    }\n  }\n\n  public addNode(node: RBNode) {\n    const sphereNode = getSphereNode(node, FontManager.getFont('helv'));\n    if (sphereNode) {\n      const rbNode: RBNode = sphereNode.userData.node;\n      const parentPosition = rbNode && rbNode.parent && rbNode.parent.userData.position;\n      sphereNode.position.copy(RedBlackTreeViewObject.getChildPosition(rbNode, parentPosition))\n      node.userData.position = sphereNode.position;\n      const line = getConnectLineMesh(sphereNode);\n      if (line) {\n        line.userData.isConnectLine = true;\n        sphereNode.add(line);\n      }\n      this._nodeViewObjectMap.set(node.key, new RBNodeViewObject(node, sphereNode));\n      this.add(sphereNode);\n    }\n  }\n\n  public update() {\n    // 这里的写法有问题，应该先操作，然后标记对应的节点，按照顺序执行节点动画\n    // [ [ ...node], [], []]，前一组执行完才执行下一组\n    if (this._animatorFlows.length) {\n      this._enterAnimating = true;\n      this._animatorFlows.forEach((animators, index) => {\n        if (!animators.length) {\n          this._animatorFlows.shift()\n        } else {\n          if (index === 0) {\n            if (!this._currentActiveAnimatorsLength) {\n              this._currentActiveAnimatorsLength = animators.length;\n            }\n            console.log(animators, 'animators')\n            animators.forEach(animator => {\n              const isAnimating = animator.animate();\n              if (!isAnimating) {\n                this._currentEndAnimatorsLength++;\n                if (this._currentEndAnimatorsLength === this._currentActiveAnimatorsLength) {\n                  this._animatorFlows.shift()\n                  this._currentEndAnimatorsLength = 0;\n                  this._currentActiveAnimatorsLength = undefined;\n                }\n              }\n            });\n          }\n        }\n      });\n    } else {\n      if (this._enterAnimating) {\n        message.info('Operation Done!', 0.1);\n        this._enterAnimating = false;\n        this._app.eventManager.emitOperationDone();\n      }\n    }\n  }\n\n  private _dityFlowsAnimationFlow(dirtyNodesFlows: RBNodeDirtyInfo[][]) {\n    const logs: any[] = [];\n    this._animatorFlows = [];\n    dirtyNodesFlows.forEach(nodeArray => {\n      logs.push(nodeArray.map(n => ({ dt: n.dirtyType, node: n.node })));\n      const animators: AnimatorBase[] = [];\n      nodeArray.forEach(info => {\n        switch (info.dirtyType) {\n          case RBNodeDirtyType.visited: {\n            if (!info.node) break;\n            const viewobject = this._nodeViewObjectMap.get(info.node.key);\n            if (viewobject) {\n              animators.push(new ShowTextAnimator({\n                node: info.node,\n                text: 'Visited',\n                mesh: viewobject.mesh,\n              }));\n              animators.push(new VisitedNodeAnimator(\n                info.node, viewobject.mesh\n              ));\n            }\n            break;\n          }\n          case RBNodeDirtyType.recolor: {\n            if (!info.node) break;\n            const viewobject = this._nodeViewObjectMap.get(info.node.key);\n            if (viewobject) {\n              animators.push(new ShowTextAnimator({\n                node: info.node,\n                text: 'ReColor',\n                mesh: viewobject.mesh,\n              }));\n              const isBlack = info.node.color === RBColor.black;\n              const color = isBlack ? 0x000000 : 0xff0000;\n              animators.push(new RecolorNodeAnimator(\n                info.node,\n                viewobject.mesh,\n                color\n              ));\n            }\n            break;\n          }\n          case RBNodeDirtyType.rightRotated:\n          case RBNodeDirtyType.leftRotated: {\n            if (!info.node) break;\n            animators.push(new RotatedAnimator(\n              info.node,\n              info.dirtyType,\n              this._nodeViewObjectMap,\n            ));\n            break;\n          }\n          case RBNodeDirtyType.find: {\n            // animators.push(new FindAnimator(\n            //   info.node,\n            //   this.font,\n            // ));\n          }\n        }\n      });\n      this._animatorFlows.push(animators);\n    });\n    console.log(logs, 'log')\n    console.log(this._animatorFlows, 'this._animatorFlows')\n  }\n\n  public insert(key: number) {\n    if (!this.tree.root) {\n      this.tree.insert(key);\n      this.addNode(new RBNode(key));\n      return;\n    }\n    if (this.tree.search(key)) {\n      return;\n    }\n\n    const dirtyNodesFlows: RBNodeDirtyInfo[][] = this.tree.insert(key, (r) => {\n      this.addNode(r);\n    });\n    this._dityFlowsAnimationFlow(dirtyNodesFlows);\n  }\n\n  public delete(key: number) {\n    if (!this.tree.root) {\n      return;\n    }\n    const dirtyNodesFlows: RBNodeDirtyInfo[][] | undefined = this.tree.delete(key);\n    if (dirtyNodesFlows) {\n      this._dityFlowsAnimationFlow(dirtyNodesFlows);\n    }\n\n  }\n\n}","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\nimport * as THREE from 'three';\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nexport function OrbitControls( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.LEFT, MIDDLE: THREE.MOUSE.MIDDLE, RIGHT: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY_PAN: 4 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t// console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t// console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t// console.log( 'handleKeyDown' );\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\t//console.log( 'handleTouchStartDollyPan' );\n\n\t\tif ( scope.enableZoom ) {\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tif ( scope.enablePan ) {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t//console.log( 'handleTouchMoveDollyPan' );\n\n\t\tif ( scope.enableZoom ) {\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\t\tdollyIn( dollyDelta.y );\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t}\n\n\t\tif ( scope.enablePan ) {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase scope.mouseButtons.LEFT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.MIDDLE:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.RIGHT:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly-pan\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly-pan\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY_PAN ) return; // is this needed?\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\n// THREE.OrbitControls = OrbitControls;\nOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\nObject.defineProperties( OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n});","module.exports = require(\"antd\");","module.exports = require(\"core-js/library/fn/map\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/parse-int\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","module.exports = require(\"events\");","module.exports = require(\"lodash\");","module.exports = require(\"react\");","module.exports = require(\"react-object-inspector\");","module.exports = require(\"three\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAdA;AAcA;AACA;AAhBA;AAAA;AAAA;AAkBA;AAAA;AAAA;AACA;AACA;AApBA;AAAA;AAAA;AAuBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA3BA;AAAA;AAAA;AA6BA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AA7CA;AACA;AADA;AAAA;AAgDA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AAEA;AAdA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AA5DA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAVA;AACA;;;;;;;;;;;;ACPA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1CA;AAAA;AAAA;AA4CA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAAA;AAAA;AAkEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAjIA;AAAA;AAAA;AAoIA;AACA;AArIA;AAAA;AAAA;AAyIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAtBA;AAwBA;AArKA;AAAA;AAAA;AAwKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA3KA;AACA;AADA;AAAA;AACA;AAmLA;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAdA;AACA;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;;AACA;AAEA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;;;AACA;AAEA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AAKA;AAIA;AACA;AAAA;AACA;AACA;AAUA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAAA;AAAA;AAQA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAAA;AAAA;AA4BA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA9CA;AAAA;AAAA;AAiDA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAtEA;AAAA;AAAA;AAyEA;AACA;AACA;AACA;AACA;AA7EA;AAAA;AAAA;AAgFA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA7FA;AAAA;AAAA;AAgGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5GA;AAAA;AAAA;AA+GA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAvHA;AACA;AADA;AAAA;AA+HA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9KA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AAVA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AACA;AAfA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AArBA;AAAA;AAAA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA5BA;AAAA;AAAA;AA+BA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AApCA;AAAA;AAAA;AAuCA;AACA;AACA;AACA;AAAA;AACA;AA3CA;AAAA;AAAA;AA8CA;AACA;AA/CA;AAAA;AAAA;AAiDA;AAEA;AAnDA;AAAA;AAAA;AAqDA;AACA;AAtDA;AAAA;AAAA;AAyDA;AAEA;AA3DA;AAAA;AAAA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtEA;AACA;AADA;AAAA;AA+EA;AACA;AAAA;AAAA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAWA;AACA;AAZA;AAAA;AAAA;AAeA;AACA;AAhBA;AAAA;AAAA;AAmBA;AACA;AApBA;AAAA;AAAA;AAuBA;AACA;AAxBA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAoCA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA1CA;AAAA;AAAA;AA6CA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AArDA;AAAA;AAAA;AAwDA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5EA;AAAA;AAAA;AA+EA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AA1GA;AAAA;AAAA;AA6GA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AArIA;AAAA;AAAA;AAwIA;AAAA;AACA;AAAA;AADA;AAAA;AAGA;AA3IA;AAAA;AAAA;AA8IA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AA9NA;AAAA;AAAA;AAiOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAvOA;AAAA;AAAA;AA0OA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA/QA;AAAA;AAAA;AAmRA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAlVA;AAAA;AAAA;AAsVA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3YA;AAAA;AAAA;AA8YA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AA1ZA;AAAA;AAAA;AA4ZA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAvaA;AACA;AADA;AAAA;AA2aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrlBA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAZA;AAAA;AAAA;AAeA;AACA;AAhBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAfA;AACA;AAIA;AAAA;AAWA;AACA;AAAA;AACA;AApCA;AAAA;AAAA;AAuCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAtDA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAEA;;;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AA1BA;AACA;AADA;AACA;AADA;AACA;;;;;;;;;;;;;;;;;;;;ACFA;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AAEA;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;AAjCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;;;;;AAQA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAOA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;AAtLA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAEA;AACA;AASA;;;;;AAQA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AAMA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;AApDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AAEA;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;AApCA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AASA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AACA;AADA;AAAA;AACA;AADA;AACA;AAiCA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AACA;AAzBA;AAAA;AAAA;AAgDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA9DA;AAAA;AAAA;AAgEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAnGA;AAAA;AAAA;AAqGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAlDA;AAoDA;AACA;AAAA;AACA;AACA;AACA;AACA;AArKA;AAAA;AAAA;AAuKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AArLA;AAAA;AAAA;AAwLA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAhMA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7CA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;AC5DA;;;;;;;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AAuBA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AA1CA;AACA;AA6CA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAxBA;AA4BA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAxBA;AACA;AA2BA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAtBA;AA0BA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAPA;AAWA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAdA;AAkBA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAdA;AAkBA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAdA;AAkBA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAdA;AAkBA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAdA;AAkBA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAdA;AAzGA;;;;;;;;;;;;;;;;;;;;;;;ACr7BA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}